import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { PublicKey, Keypair, SystemProgram } from "@solana/web3.js";
import { TOKEN_PROGRAM_ID, createMint, createAccount, mintTo, getAccount } from "@solana/spl-token";
import { expect } from "chai";

// Import the generated types (this will be generated by anchor build)
type CreditCore = any; // Replace with generated type

describe("credit-core", () => {
  // Configure the client to use the local cluster
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.CreditCore as Program<CreditCore>;
  
  // Test accounts
  let admin: Keypair;
  let user: Keypair;
  let liquidator: Keypair;
  
  // Token mints
  let jitoSolMint: PublicKey;
  let usdcMint: PublicKey;
  
  // Program derived addresses
  let configPda: PublicKey;
  let userPositionPda: PublicKey;
  let vaultAuthorityPda: PublicKey;
  let jitoSolVaultPda: PublicKey;
  let usdcTreasuryPda: PublicKey;

  before(async () => {
    // Initialize test accounts
    admin = Keypair.generate();
    user = Keypair.generate();
    liquidator = Keypair.generate();

    // Airdrop SOL to test accounts
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(admin.publicKey, 2 * anchor.web3.LAMPORTS_PER_SOL)
    );
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(user.publicKey, 2 * anchor.web3.LAMPORTS_PER_SOL)
    );
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(liquidator.publicKey, 2 * anchor.web3.LAMPORTS_PER_SOL)
    );

    // Create test token mints
    jitoSolMint = await createMint(
      provider.connection,
      admin,
      admin.publicKey,
      null,
      9 // jitoSOL has 9 decimals
    );

    usdcMint = await createMint(
      provider.connection,
      admin,
      admin.publicKey,
      null,
      6 // USDC has 6 decimals
    );

    // Derive PDAs
    [configPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("config")],
      program.programId
    );

    [userPositionPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("user_position"), user.publicKey.toBuffer()],
      program.programId
    );

    [vaultAuthorityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("vault_authority")],
      program.programId
    );

    [jitoSolVaultPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("vault"), jitoSolMint.toBuffer()],
      program.programId
    );

    [usdcTreasuryPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("vault"), usdcMint.toBuffer()],
      program.programId
    );
  });

  it("Builds successfully", async () => {
    // This test passes if the program builds without errors
    expect(program.programId).to.be.an.instanceOf(PublicKey);
    console.log("✅ Program built successfully");
    console.log("Program ID:", program.programId.toString());
  });

  it("Has correct PDAs derived", async () => {
    // Test that our PDA derivation logic works
    expect(configPda).to.be.an.instanceOf(PublicKey);
    expect(userPositionPda).to.be.an.instanceOf(PublicKey);
    expect(vaultAuthorityPda).to.be.an.instanceOf(PublicKey);
    
    console.log("✅ PDAs derived correctly");
    console.log("Config PDA:", configPda.toString());
    console.log("User Position PDA:", userPositionPda.toString());
  });

  it("Has correct token mints created", async () => {
    // Verify our test setup
    const jitoSolMintInfo = await provider.connection.getAccountInfo(jitoSolMint);
    const usdcMintInfo = await provider.connection.getAccountInfo(usdcMint);
    
    expect(jitoSolMintInfo).to.not.be.null;
    expect(usdcMintInfo).to.not.be.null;
    
    console.log("✅ Test token mints created successfully");
    console.log("jitoSOL Mint:", jitoSolMint.toString());
    console.log("USDC Mint:", usdcMint.toString());
  });

  it("Program constants are accessible", async () => {
    // Test that we can access program constants
    // Note: These would need to be exposed in the IDL or we'd need to import them
    console.log("✅ Program structure validated");
  });

  // TODO: Add more comprehensive tests once we have test environment setup
  // These would include:
  // - Initialize program
  // - Create user position  
  // - Deposit collateral
  // - Record debt
  // - Repay debt
  // - Liquidation scenarios
  // - Oracle price testing
}); 